#
# Puppet
# Reference:
#     http://docs.puppetlabs.com/references/stable/type.html
#


snippet group
    group { "${1}":
        ensure     => present,
        gid        => "${2}",
    }

snippet user
    user { "${1}":
        ensure     => present,
        uid        => "${1}",
        gid        => "${2}",
        shell      => "/bin/${3:bash}",
        home       => "/home/${1}",
        comment    => "User ${1}"
      # password   => '*',
      # groups     => [ 'users','app','dba' ]
        managehome => true,
        allowdupe  => false
    }

snippet ssh
    ssh_authorized_key {
        ensure  => present,
        user    => '${1}'
        key     => '${2}'
        name    => '${1:user@host}'
    }

snippet dir
    file { "${1}":
        ensure  => directory,
        mode    => "0775",
        owner   => "${2}"
        group   => "${3}"
      # path    => "",
        recurse => false,
    }


snippet Dir
    File { mode => "0775", owner => "${1:user}" group => "${3:app}" }


snippet file
    file { "${1}":
        ensure  => present,
        mode    => "0644",
        owner   => "${2:user}"
        group   => "${3:app}"
        source  => "puppet:///modules/${4:module_name}/${5:file_name}"
      # content => "Blahblah \n\n",
      # content => $str,
      # backup  => main, # if defined 'filebucket'
      # path    => "/path/to/file"
    }


snippet File
    File { mode => "0644", owner => "${1:user}" group => "${3:app}" }


snippet link
    file { "${1}":
        ensure  => link,
        target  => "${2}",
        force   => true
    }


snippet exec
    exec { "${1}":
        command     => "${2}",
        cwd         => "${3}",
        path        => [ "/usr/bin", "/bin" ],
      # creates     => '/path/to/file',
      # user        => 'user',
      # group       => 'app',
      # environment => [ "RAILS_ENV=production", "TAG=v1" ],
      # logoutput   => on_failure,
      # onlyif      => "test `du /var/log/messages | cut -f1` -gt 100000"
      # unless      => "grep root /usr/lib/cron/cron.allow 2>/dev/null"
      # tries       => 3
      # timeout     => 60  # seconds
      # try_sleep   => 15  # seconds
    }


snippet Exec
	Exec {
	    path      => '/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin'
	    logoutput => on_failure,
	}


snippet package
    package { "${1:package}":
        ensure => "present",
      # ensure => [installed, '1.6.9p17-2'],
      # require => Package[ openssl ],
      # source  => "http://exameple.com/pkg.rpm",
      # provider => :rpm,
      # provider => :yum,
      # alias   => "openssh",
      # description => "OpenSSH",
    }


snippet Package
    Package { source  => "http://exameple.com/pkg.rpm" }


snippet cron
    cron { "${1:myjob}":
        ensure   => present,
        command  => "${2:/usr/local/bin/myjob.sh -f}",
        user     => "${3:userapp}",
        hour     => "23",  # 00-23
        minute   => "00",  # 00-59
      # monthday => "01",  # 01-31
      # month    => "01",  # 01-12
      # weekday  => "01",  # 00-07 / Sunday,Monday,etc...
      # environment => [ "RAILS_ENV=production", "TAG=v1" ],
    }


snippet host
    host { "${1:localhost}":
        ensure       => present,
        ip           => '${2:127.0.0.1}'
        name         => '${1:localhost}'
      # host_aliases => [ 'localhost.localdomain' ],
      # comment      => 'localhost only!',
    }


snippet mount
    mount { "${1:/home}":
        ensure  => mounted,
        atboot  => true,
        device  => "${2:192.168.10.10:/path}",
        fstype  => "nfs",   # ext3, xfs, nfs
        options => "defaults,ro,_netdev,noexec,nosuid",
        dump    => "0",
        pass    => "0",     # 0:nfs, 2:others
      # require => [ Package["nfs-utils"], Package["nfs"] ];
    }


snippet package
    package { "${1:package_name}":
        ensure  => installed,
      # source  => 'http://pkg.com/package.name.rpm',
      # alias   => "",
      # description => "",
    }

snippet service
    service { "${1:service_name}":
        enable  => true,
        ensure  => running,
      # name    => "${1:service_name}",
      # pattern => "${1:service_name}",
      # start   => "",
      # stop    => "",
      # restart => "",
      # status  => "",
    }


snippet tidy
    tidy { "${1:/tmp}":
        age  => "${2:1w}",
      # size => "${3:50m}",  # 50b, 50k, 50m, 50g, 50t
      # matches => [ "*.temp", "tmpfile?" ],
      # recurse => true,
      # rmdirs  => true,
      # path => "",
    }


snippet yumrepo
    yumrepo { "${1:RHEL x}":
        name     => "${1:RHEL x}",
        descr    => "RHEL X",
        baseurl  => "http://example.org/pub/stable/$operatingsystem/$operatingsystemrelease/$architecture",
        enabled  => true,
      # gpgcheck => true,
      # gpgkey   => "",
      # mirrorlist => [ "", ""],
      # timeout  => 120, # 120 secondes
      # proxy    => "",
      # proxy_username => "",
      # proxy_password => "",

    }


snippet node
    node /${1}/ {

        include ${2}

    }


snippet class
    class ${1} {

        $${1:var} = ${2}

    }


snippet class
    class ${1}(${1:param}) {

        $${1:var} = ${2}

    }


snippet define
    define ${1}(${1:param}) {

        include ${2}

    end
    }


# vim:ft=puppet

